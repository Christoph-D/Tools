#!/bin/bash
# Copyright: Christoph Dittmann <github@christoph-d.de>
# License: GNU GPL, version 3 or later; http://www.gnu.org/copyleft/gpl.html
#
# This script takes a screenshot of a window. It saves the screenshots
# as 1.png, 1_small_A.png and 1_small_B.png. 1.png is the original,
# the smaller versions are created using different scale filters. The
# aspect ratio is assumed to be 4:3.
# 
# The scaled down versions are suitable for Anki cards.

set -e -u

if [[ $# -ne 1 ]]; then
    echo "Please click on a window."
    WINDOW_ID="$(xwininfo | grep -m 1 'Window id: ' | sed 's/^.*Window id: \([^ ]*\) .*$/\1/')"
    echo "Window id: $WINDOW_ID"
else
    WINDOW_ID="$1"
    if [[ $WINDOW_ID = '--foreground-window' ]]; then
        WINDOW_ID=$(xdotool getwindowfocus)
    fi
fi

i=1
while [[ -f $i.png || -f ${i}_small.png ]]; do
    let ++i
done

import_window() {
    if ! import -silent -window "$1" "$2"; then
        echo "Import failed. Invalid window ID?"
        exit 1
    fi
}
too_small() {
    [[ $(du -b "$1" | cut -f 1) -lt 4096 ]]
}

tries=6
while :; do
    let --tries
    import_window "$WINDOW_ID" "$i.png"
    if ! too_small "$i.png" || [[ $tries -eq 0 ]]; then
        break
    fi
    echo "Import seems to have failed. Will try again ($tries tries remaining)..."
    sleep 0.1
done
if too_small "$i.png"; then
    echo "Import does not seem to succeed. Sorry about that."
    exit 1
fi

echo "Filename: $i.png ${i}_small.png"

convert $i.png -resize 600x300 ${i}_small.png

gimp_code() {
    echo '(let* ((image (car (gimp-file-load RUN-NONINTERACTIVE "'"$1"'" "'"$1"'")))
          (drawable (car (gimp-image-get-active-layer image))))
     (gimp-file-save RUN-NONINTERACTIVE image drawable "'"$1"'" "'"$1"'")
     (gimp-image-delete image))'
}

# Make the image file a lot smaller
gimp -i -b "
    $(gimp_code "$i.png")
    $(gimp_code "${i}_small.png")
    (gimp-quit 0)" &>/dev/null

exit 0
